# This is a basic workflow to help you get started with Actions

name: Run Selenium Tests

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      # Create a dropdown for options
      environment:
        description: 'Select an environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - production
      testType:
        description: 'Select the type of test to run'
        required: true
        default: 'sanity'
        type: choice
        options:
          - sanity  # sanity tests
          - e2e     # end-to-end tests
          - specific # specific test
          - api
          - perf
      custom_input:
        description: 'Enter Class and Method name (e.g., GetLinksTest#getLinks)'
        required: false
        default: 'GetLinksTest#getLinks'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Maven dependencies
      - name: Cache Maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '22'  # Use the Java version your project requires
          distribution: 'adopt'

      # Print selected environment
      - name: Print selected environment
        run: |
          echo "Selected environment: ${{ github.event.inputs.environment }}"

      # Conditionally run steps based on the dropdown selection
      - name: Run in development environment
        if: ${{ github.event.inputs.environment == 'dev' }}
        run: echo "Running in development environment!"

      - name: Run specific TestNG method
        run: |
            echo "Running tests in the ${{ github.event.inputs.environment }} environment."
            echo "Running test: ${{ github.event.inputs.custom_input }}"
            
            mvn test -Denv=${{ github.event.inputs.environment }} -Dtests=${{ github.event.inputs.custom_input }}

      # Run TestNG Tests based on input
      - name: Run TestNG Tests
        run: |
          echo "Running tests in the ${{ github.event.inputs.environment }} environment."
          echo "Test type: ${{ github.event.inputs.testType }}" 
          
          # Command to run tests based on input
          if [ "${{ github.event.inputs.testType }}" = "sanity" ]; then
            mvn test -Denv=${{ github.event.inputs.environment }} -Dgroups=sanity
          elif [ "${{ github.event.inputs.testType }}" = "e2e" ]; then
            mvn test -Denv=${{ github.event.inputs.environment }} -Dgroups=e2e
          elif [ "${{ github.event.inputs.testType }}" = "api" ]; then
            mvn test -Denv=${{ github.event.inputs.environment }} -Dgroups=api
          elif [ "${{ github.event.inputs.testType }}" = "perf" ]; then
            mvn gatling:test
          else
            # mvn test -Dtest=${{ github.event.inputs.custom_input }}
            mvn test -Dtest=com.example.GetLinksTest#getLinks2
          fi
      # Upload Surefire HTML Report (or TestNG Report)
      - name: Upload TestNG Default Reports
        uses: actions/upload-artifact@v3
        with:
          name: testng-output
          path: |
            if [ "${{ github.event.inputs.testType }}" = "perf" ]; then
              target/surefire-reports  # Path to TestNG reports      
            else
              target/surefire-reports # Path to TestNG reports
            fi