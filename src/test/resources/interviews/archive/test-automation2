𝐑𝐚𝐭𝐞 𝐋𝐢𝐦𝐢𝐭𝐢𝐧𝐠: APIs often have rate #limits to prevent abuse.
Automation scripts can simulate excessive requests and validate the API’s response when the limit is exceeded.
Example: Sending more than 100 #requests in a minute and checking if the response returns 429 Too Many Requests.

1.1 𝐀𝐮𝐭𝐡𝐞𝐧𝐭𝐢𝐜𝐚𝐭𝐢𝐨𝐧: Testing scenarios where users login via OAuth, JWT, or other mechanisms.
Example: Validating token-based #authentication for different user roles using automation scripts in Selenium or Cypress.
1.2 𝐀𝐮𝐭𝐡𝐨𝐫𝐢𝐳𝐚𝐭𝐢𝐨𝐧: Verifying that only users with the correct permissions can access certain APIs.
Example: #Automating role-based access tests, ensuring unauthorized users receive proper error messages.
2. 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭 𝐒𝐭𝐫𝐚𝐭𝐞𝐠𝐢𝐞𝐬:
->𝐁𝐥𝐮𝐞-𝐆𝐫𝐞𝐞𝐧 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭: Two environments (Blue and Green) are maintained.
The new version is deployed to the #inactive environment, and traffic is switched only after successful testing.
Example: Switch from Blue (live) to Green (new version) with zero downtime.
- >𝐂𝐚𝐧𝐚𝐫𝐲 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭: Gradually roll out a new version to a subset of users while monitoring its #performance.
If stable, the update is rolled out to the rest.
Example: Release the update to 10% of users, monitor, and expand if no issues arise.
- >𝐑𝐨𝐥𝐥𝐢𝐧𝐠 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭: Incrementally replace the old #version with the new one across servers, ensuring no downtime but slower rollouts.
Example: Update 20% of servers at a time, ensuring minimal impact.
- >𝐑𝐞𝐜𝐫𝐞𝐚𝐭𝐞 𝐃𝐞𝐩𝐥𝐨𝐲𝐦𝐞𝐧𝐭: The current version is fully taken down before deploying the new one.
Simple but involves #downtime.
Example: Take down the app, deploy the new version, and bring it back online.
- >𝐀/𝐁 𝐓𝐞𝐬𝐭𝐢𝐧𝐠: Similar to canary, but serves different user experiences (A and B) to compare #performance and user #feedback.
Example: Test new features on version B for a specific user group while keeping version A for

I recently had an interview for an SDET II role where I was asked some pretty challenging questions, particularly around API testing using the RestAssured framework. Here are a few questions that stood out:

1. How would you validate the dynamic structure of a Gmail API response where the number of unread emails varies?
For this question, I had to demonstrate how to handle a dynamic JSON response when the number of unread emails changes.
I used JsonPath in RestAssured to extract the count of unread emails dynamically and validate it with assertions.

1. How would you automate OAuth2 authentication for accessing Gmail APIs in your RestAssured tests?
I needed to explain how to automate the OAuth2 authentication process using RestAssured.
This included obtaining an access token, managing token expiration, and using it to authorize requests to Gmail's secure APIs.

1. How would you test the rate limits for Gmail API using RestAssured?
I was asked to describe how to test the rate limits of the Gmail API by simulating multiple rapid requests and detecting when the API starts returning a 429 Too Many Requests response.
I proposed implementing a loop to send multiple requests, checking for the 429 status code, and adjusting the request strategy accordingly.

1. How would you validate the content of an email message retrieved from Gmail using RestAssured?
For this one, I had to show how to extract the email body from a response using JsonPath and then validate its content against expected values, considering scenarios where the content might be encoded.

1. How can you ensure your tests are resilient to Gmail API changes, such as new fields being added to the response?
This question was about designing tests that are flexible and future-proof.
I discussed using JSON Schema validation with rest-assured-json-schema-validator to handle dynamic fields and maintain robust test coverage even when the API evolves.


