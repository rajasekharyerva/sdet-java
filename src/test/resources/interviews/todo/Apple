1. How does Java’s garbage collection mechanism work to manage memory efficiently?

𝐀𝐧𝐬𝐰𝐞𝐫: Java’s garbage collector automatically identifies and deallocates objects that are no longer in use to free up memory, ensuring optimised performance and preventing memory leaks.

2. What’s the best approach to analyse the time and space complexity of an 𝐚𝐥𝐠𝐨𝐫𝐢𝐭𝐡𝐦?

Answer: To analyse an algorithm's complexity:

Time Complexity: Count the number of basic operations as a function of input size (e.g., O(n), O(log n)).

Space Complexity: Measure the additional space needed relative to input size (e.g., O(1), O(n)).

3. Implement an LRU (Least Recently Used) cache. It should support two operations: get(key) and put(key, value).

𝐑𝐞𝐪𝐮𝐢𝐫𝐞𝐦𝐞𝐧𝐭𝐬:

get(key): Returns the value if the key exists, otherwise returns -1.

put(key, value): Inserts or updates the key-value pair. If the cache reaches its capacity, remove the least recently used item.

𝐈𝐧𝐩𝐮𝐭/𝐎𝐮𝐭𝐩𝐮𝐭 𝐄𝐱𝐚𝐦𝐩𝐥𝐞:

Input: LRUCache(2), put(1, 1), put(2, 2), get(1), put(3, 3), get(2)

Output: 1, -1 (as key 2 was evicted)

4. Given an array of integer nums and an integer target, return 𝐢𝐧𝐝𝐢𝐜𝐞𝐬 of the two numbers such that they add up to the target.

𝐈𝐧𝐩𝐮𝐭/𝐎𝐮𝐭𝐩𝐮𝐭 𝐄𝐱𝐚𝐦𝐩𝐥𝐞:

Input: nums = [2, 7, 11, 15], target = 9

Output: [0, 1] (since nums[0] + nums[1] = 2 + 7 = 9)

5. Given a string containing (), {}, [], determine if the input string is valid. A string is valid if brackets close in the correct order.

𝐈𝐧𝐩𝐮𝐭/𝐎𝐮𝐭𝐩𝐮𝐭 𝐄𝐱𝐚𝐦𝐩𝐥𝐞:

Input: "()[]{}"

Output: True

Input: "(]"

Output: False